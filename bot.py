import os
import telebot
import requests
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file

TOKEN = os.getenv("TOKEN")  # Telegram bot token
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # OpenWeatherMap API key

bot = telebot.TeleBot(TOKEN)  # Create bot instance

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # Respond to /start command with a welcome message
    bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –ø–æ–≥–æ–¥–Ω–∏–π –±–æ—Ç. –ù–∞–ø–∏—à–∏ /weather <–º—ñ—Å—Ç–æ>, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É.")

@bot.message_handler(commands=['weather'])
def ask_city(message):
    # Ask user to enter the city name after /weather command
    bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É.")
    bot.register_next_step_handler(message, get_weather)

def get_weather(message):
    city = message.text.strip()  # Get city name from user's message
    weather_info = get_weather_data(city)  # Fetch weather info from API
    bot.send_message(message.chat.id, weather_info)

def get_air_quality(lat, lon):
    url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        aqi = data['list'][0]['main']['aqi']
        aqi_desc = {
            1: "–î–æ–±—Ä–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è üòä",
            2: "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è üôÇ",
            3: "–ü–æ–º—ñ—Ä–Ω–µ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è üòê",
            4: "–ü–æ–≥–∞–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è üò∑",
            5: "–î—É–∂–µ –ø–æ–≥–∞–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è ü§¢"
        }
        return aqi_desc.get(aqi, "–ù–µ–≤—ñ–¥–æ–º–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è")
    else:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è."

def get_weather_data(city):
    translations = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–•–º–∞—Ä–Ω–æ ‚òÅÔ∏è",
        "Rain": "–î–æ—â üåßÔ∏è",
        "Drizzle": "–ú—Ä—è–∫–∞ üå¶Ô∏è",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õàÔ∏è",
        "Snow": "–°–Ω—ñ–≥ ‚ùÑÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üå´Ô∏è",
        "Fog": "–¢—É–º–∞–Ω üå´Ô∏è",
        "Haze": "–ú—Ä—è–∫–∞ üå¶Ô∏è",
        "Sand": "–ü—ñ—Å–æ–∫ üèúÔ∏è",
        "Tornado": "–¢–æ—Ä–Ω–∞–¥–æ üå™Ô∏è"
    }

    # Build weather API URL
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ua"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        temp = data['main']['temp']  # Current temperature
        main_weather_en = data['weather'][0]['main']  # Weather description
        main_weather_ua = translations.get(main_weather_en, main_weather_en)

        lat = data['coord']['lat']
        lon = data['coord']['lon']
        air_quality = get_air_quality(lat, lon)

        return (f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {city}:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                f"–°—Ç–∞–Ω: {main_weather_ua}\n"
                f"–Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è: {air_quality}")
    else:
        return "–í–∏–±–∞—á, –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ –º—ñ—Å—Ç–æ."

bot.polling()
